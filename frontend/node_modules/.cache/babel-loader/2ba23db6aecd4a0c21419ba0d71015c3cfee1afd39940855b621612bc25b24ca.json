{"ast":null,"code":"var _jsxFileName = \"/Users/davidnewberry/Documents/test_rails/frontend/src/components/RiffControls/EditInterface.js\";\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport YouTubeVideo from '../YouTubeVideo/YouTubeVideo';\nimport Login from '../Login/Login';\nimport EditControls from './EditControls';\nimport { setVideoID, setWebSocket, getRiffsMeta, getRiffs, setRecorder } from '../../actions';\nimport MetaBar from '../MetaBar';\nimport NavBar from '../NavBar.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass EditInterface extends React.Component {\n  constructor(props) {\n    super(props);\n    this.componentDidMount = () => {\n      if (this.props.match.params.videoID) {\n        this.props.setVideoID(this.props.match.params.videoID);\n        this.videoIDRef.current.value = this.props.match.params.videoID;\n\n        // check if user is logged in\n        debugger;\n        currentUserStatus();\n      }\n    };\n    this.componentDidUpdate = (prevProps, prevState) => {\n      if (this.props.match.params.videoID !== this.props.videoID) {\n        this.props.setVideoID(this.props.match.params.videoID);\n        this.videoIDRef.current.value = this.props.match.params.videoID;\n      }\n      if (this.props.loggedIn && this.props.videoID && this.props.userInfo !== prevProps.userInfo) {\n        this.props.getRiffs(this.props.videoID);\n      }\n\n      /*\n      if (\n        this.props.loggedIn &&\n        (!this.props.websocket || this.props.videoID !== prevProps.videoID)\n      ) {\n        //const websocket = new WebSocket( `ws://localhost:3300/riff?videoID=${this.props.match.params.videoID}&googleToken=${this.props.googleUser.getAuthResponse().id_token}` );\n        var baseURL;\n        if (process.env.NODE_ENV === 'production')\n          baseURL = 'wss://rifftube.herokuapp.com';\n        else baseURL = 'ws://localhost:3300';\n         const websocket = new WebSocket(\n          `${baseURL}/riff?videoID=${\n            this.props.match.params.videoID\n          }&googleToken=${this.props.googleUser.getAuthResponse().id_token}`\n        );\n        websocket.onmessage = (event) => {\n          console.log(event.data);\n           const msg = JSON.parse(event.data);\n           if (msg.video_id === this.props.videoID && msg.type === 'update')\n            this.props.getRiffsMeta(this.props.videoID);\n        };\n        this.props.setWebSocket(websocket);\n      }\n      */\n    };\n    this.authCheck = (Component, DefaultComponent) => {\n      return this.props.loggedIn ? /*#__PURE__*/_jsxDEV(Component, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 34\n      }, this) : /*#__PURE__*/_jsxDEV(DefaultComponent, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 50\n      }, this);\n    };\n    this.extractVideoID = url => {\n      var regExp = /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n      var match = url.match(regExp);\n      if (match && match[7].length === 11) {\n        return match[7];\n      } else {\n        return url; // if extraction fails, fallback on assuming they gave an ID\n      }\n    };\n    this.videoIDRef = /*#__PURE__*/React.createRef();\n  }\n  render() {\n    return this.props.match.params.videoID ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(NavBar, {\n        color: \"grey\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"youtube-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"top-section\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"title-and-url\",\n            children: /*#__PURE__*/_jsxDEV(\"h1\", {\n              className: \"heading-primary-main\",\n              children: \"RiffTube\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"get-started-instructions\",\n          children: this.props.loggedIn ? null : /*#__PURE__*/_jsxDEV(React.Fragment, {\n            children: [/*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 17\n            }, this), \" \", /*#__PURE__*/_jsxDEV(\"p\", {\n              children: \"to get started\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 27\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Paste any YouTube URL here \\u2192 \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          defaultValue: this.props.videoID,\n          ref: this.videoIDRef\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn\",\n          id: \"change-video-btn\",\n          onClick: e => {\n            const vID = this.extractVideoID(this.videoIDRef.current.value);\n            this.props.history.push(`/riff/${vID}`);\n            this.props.setVideoID(vID);\n          },\n          children: \"Change Video\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(YouTubeVideo, {\n          id: this.props.videoID,\n          riffs: this.props.riffs\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MetaBar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"view-share-riff-link\",\n          children: /*#__PURE__*/_jsxDEV(\"a\", {\n            href: '/view/' + this.props.videoID + (this.props.userInfo ? '?solo=' + this.props.userInfo.user_id : ''),\n            target: \"_blank\",\n            rel: \"noopener noreferrer\",\n            children: \"View & Share Riffed Video\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), this.props.loggedIn ? /*#__PURE__*/_jsxDEV(EditControls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 32\n      }, this) : null]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n      to: `/riff/${this.props.videoID}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this);\n  }\n}\nconst mapStateToProps = state => ({\n  riffs: state.riffs.all,\n  videoID: state.videoID,\n  websocket: state.websocket,\n  recorder: state.recorder,\n  loggedIn: state.loggedIn,\n  userInfo: state.userInfo\n});\nconst mapDispatchToProps = {\n  setVideoID,\n  setWebSocket,\n  getRiffsMeta,\n  getRiffs,\n  setRecorder\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(EditInterface);","map":{"version":3,"names":["React","connect","Redirect","YouTubeVideo","Login","EditControls","setVideoID","setWebSocket","getRiffsMeta","getRiffs","setRecorder","MetaBar","NavBar","EditInterface","Component","constructor","props","componentDidMount","match","params","videoID","videoIDRef","current","value","currentUserStatus","componentDidUpdate","prevProps","prevState","loggedIn","userInfo","authCheck","DefaultComponent","extractVideoID","url","regExp","length","createRef","render","e","vID","history","push","riffs","user_id","mapStateToProps","state","all","websocket","recorder","mapDispatchToProps"],"sources":["/Users/davidnewberry/Documents/test_rails/frontend/src/components/RiffControls/EditInterface.js"],"sourcesContent":["import React from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport YouTubeVideo from '../YouTubeVideo/YouTubeVideo';\nimport Login from '../Login/Login';\nimport EditControls from './EditControls';\nimport {\n  setVideoID,\n  setWebSocket,\n  getRiffsMeta,\n  getRiffs,\n  setRecorder,\n} from '../../actions';\nimport MetaBar from '../MetaBar';\nimport NavBar from '../NavBar.js';\n\nclass EditInterface extends React.Component {\n  constructor(props) {\n    super(props);\n    this.videoIDRef = React.createRef();\n  }\n\n  componentDidMount = () => {\n    if (this.props.match.params.videoID) {\n      this.props.setVideoID(\n        this.props.match.params.videoID\n      );\n      this.videoIDRef.current.value = this.props.match.params.videoID;\n\n      // check if user is logged in\n      debugger;\n      currentUserStatus();\n    }\n  };\n\n  componentDidUpdate = (prevProps, prevState) => {\n    if (this.props.match.params.videoID !== this.props.videoID) {\n      this.props.setVideoID(\n        this.props.match.params.videoID\n      );\n      this.videoIDRef.current.value = this.props.match.params.videoID;\n    }\n\n    if (\n      this.props.loggedIn &&\n      this.props.videoID &&\n      this.props.userInfo !== prevProps.userInfo\n    ) {\n      this.props.getRiffs(this.props.videoID);\n    }\n\n    /*\n    if (\n      this.props.loggedIn &&\n      (!this.props.websocket || this.props.videoID !== prevProps.videoID)\n    ) {\n      //const websocket = new WebSocket( `ws://localhost:3300/riff?videoID=${this.props.match.params.videoID}&googleToken=${this.props.googleUser.getAuthResponse().id_token}` );\n      var baseURL;\n      if (process.env.NODE_ENV === 'production')\n        baseURL = 'wss://rifftube.herokuapp.com';\n      else baseURL = 'ws://localhost:3300';\n\n      const websocket = new WebSocket(\n        `${baseURL}/riff?videoID=${\n          this.props.match.params.videoID\n        }&googleToken=${this.props.googleUser.getAuthResponse().id_token}`\n      );\n      websocket.onmessage = (event) => {\n        console.log(event.data);\n\n        const msg = JSON.parse(event.data);\n\n        if (msg.video_id === this.props.videoID && msg.type === 'update')\n          this.props.getRiffsMeta(this.props.videoID);\n      };\n      this.props.setWebSocket(websocket);\n    }\n    */\n  };\n\n  authCheck = (Component, DefaultComponent) => {\n    return this.props.loggedIn ? <Component /> : <DefaultComponent />;\n  };\n  /* extracts the youtube id from a url. got help from: https://ctrlq.org/code/19797-regex-youtube-id */\n  extractVideoID = (url) => {\n    var regExp =\n      /^.*((youtu.be\\/)|(v\\/)|(\\/u\\/\\w\\/)|(embed\\/)|(watch\\?))\\??v?=?([^#&?]*).*/;\n    var match = url.match(regExp);\n    if (match && match[7].length === 11) {\n      return match[7];\n    } else {\n      return url; // if extraction fails, fallback on assuming they gave an ID\n    }\n  };\n\n  render() {\n    return this.props.match.params.videoID ? (\n      <React.Fragment>\n        <NavBar color=\"grey\" />\n        <div className=\"youtube-section\">\n          <div className=\"top-section\">\n            <div className=\"title-and-url\">\n              <h1 className=\"heading-primary-main\">RiffTube</h1>\n            </div>\n          </div>\n          <h4 className=\"get-started-instructions\">\n            {this.props.loggedIn ? null : (\n              <React.Fragment>\n                <Login /> <p>to get started</p>\n              </React.Fragment>\n            )}\n          </h4>\n          <label>Paste any YouTube URL here &#8594; </label>\n          <input\n            type=\"text\"\n            defaultValue={this.props.videoID}\n            ref={this.videoIDRef}\n          />\n          <button className=\"btn\" id=\"change-video-btn\" onClick={(e) => {\n              const vID = this.extractVideoID(this.videoIDRef.current.value);\n\n              this.props.history.push(`/riff/${vID}`);\n\n              this.props.setVideoID(vID);\n            }}>\n            Change Video\n          </button>\n          <YouTubeVideo id={this.props.videoID} riffs={this.props.riffs} />\n          <MetaBar />\n          <div className=\"view-share-riff-link\">\n            <a\n              href={\n                '/view/' +\n                this.props.videoID +\n                (this.props.userInfo ? '?solo=' + this.props.userInfo.user_id : '')\n              }\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              View &amp; Share Riffed Video\n            </a>\n          </div>\n        </div>\n        {this.props.loggedIn ? <EditControls /> : null}\n      </React.Fragment>\n    ) : (\n      <Redirect to={`/riff/${this.props.videoID}`} />\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  riffs: state.riffs.all,\n  videoID: state.videoID,\n  websocket: state.websocket,\n  recorder: state.recorder,\n\n  loggedIn: state.loggedIn,\n  userInfo: state.userInfo,\n});\n\nconst mapDispatchToProps = {\n  setVideoID,\n  setWebSocket,\n  getRiffsMeta,\n  getRiffs,\n  setRecorder,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditInterface);\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,aAAa;AACrC,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,OAAOC,YAAY,MAAM,8BAA8B;AACvD,OAAOC,KAAK,MAAM,gBAAgB;AAClC,OAAOC,YAAY,MAAM,gBAAgB;AACzC,SACEC,UAAU,EACVC,YAAY,EACZC,YAAY,EACZC,QAAQ,EACRC,WAAW,QACN,eAAe;AACtB,OAAOC,OAAO,MAAM,YAAY;AAChC,OAAOC,MAAM,MAAM,cAAc;AAAC;AAElC,MAAMC,aAAa,SAASb,KAAK,CAACc,SAAS,CAAC;EAC1CC,WAAW,CAACC,KAAK,EAAE;IACjB,KAAK,CAACA,KAAK,CAAC;IAAC,KAIfC,iBAAiB,GAAG,MAAM;MACxB,IAAI,IAAI,CAACD,KAAK,CAACE,KAAK,CAACC,MAAM,CAACC,OAAO,EAAE;QACnC,IAAI,CAACJ,KAAK,CAACV,UAAU,CACnB,IAAI,CAACU,KAAK,CAACE,KAAK,CAACC,MAAM,CAACC,OAAO,CAChC;QACD,IAAI,CAACC,UAAU,CAACC,OAAO,CAACC,KAAK,GAAG,IAAI,CAACP,KAAK,CAACE,KAAK,CAACC,MAAM,CAACC,OAAO;;QAE/D;QACA;QACAI,iBAAiB,EAAE;MACrB;IACF,CAAC;IAAA,KAEDC,kBAAkB,GAAG,CAACC,SAAS,EAAEC,SAAS,KAAK;MAC7C,IAAI,IAAI,CAACX,KAAK,CAACE,KAAK,CAACC,MAAM,CAACC,OAAO,KAAK,IAAI,CAACJ,KAAK,CAACI,OAAO,EAAE;QAC1D,IAAI,CAACJ,KAAK,CAACV,UAAU,CACnB,IAAI,CAACU,KAAK,CAACE,KAAK,CAACC,MAAM,CAACC,OAAO,CAChC;QACD,IAAI,CAACC,UAAU,CAACC,OAAO,CAACC,KAAK,GAAG,IAAI,CAACP,KAAK,CAACE,KAAK,CAACC,MAAM,CAACC,OAAO;MACjE;MAEA,IACE,IAAI,CAACJ,KAAK,CAACY,QAAQ,IACnB,IAAI,CAACZ,KAAK,CAACI,OAAO,IAClB,IAAI,CAACJ,KAAK,CAACa,QAAQ,KAAKH,SAAS,CAACG,QAAQ,EAC1C;QACA,IAAI,CAACb,KAAK,CAACP,QAAQ,CAAC,IAAI,CAACO,KAAK,CAACI,OAAO,CAAC;MACzC;;MAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IAIE,CAAC;IAAA,KAEDU,SAAS,GAAG,CAAChB,SAAS,EAAEiB,gBAAgB,KAAK;MAC3C,OAAO,IAAI,CAACf,KAAK,CAACY,QAAQ,gBAAG,QAAC,SAAS;QAAA;QAAA;QAAA;MAAA,QAAG,gBAAG,QAAC,gBAAgB;QAAA;QAAA;QAAA;MAAA,QAAG;IACnE,CAAC;IAAA,KAEDI,cAAc,GAAIC,GAAG,IAAK;MACxB,IAAIC,MAAM,GACR,2EAA2E;MAC7E,IAAIhB,KAAK,GAAGe,GAAG,CAACf,KAAK,CAACgB,MAAM,CAAC;MAC7B,IAAIhB,KAAK,IAAIA,KAAK,CAAC,CAAC,CAAC,CAACiB,MAAM,KAAK,EAAE,EAAE;QACnC,OAAOjB,KAAK,CAAC,CAAC,CAAC;MACjB,CAAC,MAAM;QACL,OAAOe,GAAG,CAAC,CAAC;MACd;IACF,CAAC;IA1EC,IAAI,CAACZ,UAAU,gBAAGrB,KAAK,CAACoC,SAAS,EAAE;EACrC;EA2EAC,MAAM,GAAG;IACP,OAAO,IAAI,CAACrB,KAAK,CAACE,KAAK,CAACC,MAAM,CAACC,OAAO,gBACpC,QAAC,KAAK,CAAC,QAAQ;MAAA,wBACb,QAAC,MAAM;QAAC,KAAK,EAAC;MAAM;QAAA;QAAA;QAAA;MAAA,QAAG,eACvB;QAAK,SAAS,EAAC,iBAAiB;QAAA,wBAC9B;UAAK,SAAS,EAAC,aAAa;UAAA,uBAC1B;YAAK,SAAS,EAAC,eAAe;YAAA,uBAC5B;cAAI,SAAS,EAAC,sBAAsB;cAAA,UAAC;YAAQ;cAAA;cAAA;cAAA;YAAA;UAAK;YAAA;YAAA;YAAA;UAAA;QAC9C;UAAA;UAAA;UAAA;QAAA,QACF,eACN;UAAI,SAAS,EAAC,0BAA0B;UAAA,UACrC,IAAI,CAACJ,KAAK,CAACY,QAAQ,GAAG,IAAI,gBACzB,QAAC,KAAK,CAAC,QAAQ;YAAA,wBACb,QAAC,KAAK;cAAA;cAAA;cAAA;YAAA,QAAG,KAAC;cAAA,UAAG;YAAc;cAAA;cAAA;cAAA;YAAA,QAAI;UAAA;YAAA;YAAA;YAAA;UAAA;QAElC;UAAA;UAAA;UAAA;QAAA,QACE,eACL;UAAA,UAAO;QAAmC;UAAA;UAAA;UAAA;QAAA,QAAQ,eAClD;UACE,IAAI,EAAC,MAAM;UACX,YAAY,EAAE,IAAI,CAACZ,KAAK,CAACI,OAAQ;UACjC,GAAG,EAAE,IAAI,CAACC;QAAW;UAAA;UAAA;UAAA;QAAA,QACrB,eACF;UAAQ,SAAS,EAAC,KAAK;UAAC,EAAE,EAAC,kBAAkB;UAAC,OAAO,EAAGiB,CAAC,IAAK;YAC1D,MAAMC,GAAG,GAAG,IAAI,CAACP,cAAc,CAAC,IAAI,CAACX,UAAU,CAACC,OAAO,CAACC,KAAK,CAAC;YAE9D,IAAI,CAACP,KAAK,CAACwB,OAAO,CAACC,IAAI,CAAE,SAAQF,GAAI,EAAC,CAAC;YAEvC,IAAI,CAACvB,KAAK,CAACV,UAAU,CAACiC,GAAG,CAAC;UAC5B,CAAE;UAAA,UAAC;QAEL;UAAA;UAAA;UAAA;QAAA,QAAS,eACT,QAAC,YAAY;UAAC,EAAE,EAAE,IAAI,CAACvB,KAAK,CAACI,OAAQ;UAAC,KAAK,EAAE,IAAI,CAACJ,KAAK,CAAC0B;QAAM;UAAA;UAAA;UAAA;QAAA,QAAG,eACjE,QAAC,OAAO;UAAA;UAAA;UAAA;QAAA,QAAG,eACX;UAAK,SAAS,EAAC,sBAAsB;UAAA,uBACnC;YACE,IAAI,EACF,QAAQ,GACR,IAAI,CAAC1B,KAAK,CAACI,OAAO,IACjB,IAAI,CAACJ,KAAK,CAACa,QAAQ,GAAG,QAAQ,GAAG,IAAI,CAACb,KAAK,CAACa,QAAQ,CAACc,OAAO,GAAG,EAAE,CACnE;YACD,MAAM,EAAC,QAAQ;YACf,GAAG,EAAC,qBAAqB;YAAA,UAC1B;UAED;YAAA;YAAA;YAAA;UAAA;QAAI;UAAA;UAAA;UAAA;QAAA,QACA;MAAA;QAAA;QAAA;QAAA;MAAA,QACF,EACL,IAAI,CAAC3B,KAAK,CAACY,QAAQ,gBAAG,QAAC,YAAY;QAAA;QAAA;QAAA;MAAA,QAAG,GAAG,IAAI;IAAA;MAAA;MAAA;MAAA;IAAA,QAC/B,gBAEjB,QAAC,QAAQ;MAAC,EAAE,EAAG,SAAQ,IAAI,CAACZ,KAAK,CAACI,OAAQ;IAAE;MAAA;MAAA;MAAA;IAAA,QAC7C;EACH;AACF;AAEA,MAAMwB,eAAe,GAAIC,KAAK,KAAM;EAClCH,KAAK,EAAEG,KAAK,CAACH,KAAK,CAACI,GAAG;EACtB1B,OAAO,EAAEyB,KAAK,CAACzB,OAAO;EACtB2B,SAAS,EAAEF,KAAK,CAACE,SAAS;EAC1BC,QAAQ,EAAEH,KAAK,CAACG,QAAQ;EAExBpB,QAAQ,EAAEiB,KAAK,CAACjB,QAAQ;EACxBC,QAAQ,EAAEgB,KAAK,CAAChB;AAClB,CAAC,CAAC;AAEF,MAAMoB,kBAAkB,GAAG;EACzB3C,UAAU;EACVC,YAAY;EACZC,YAAY;EACZC,QAAQ;EACRC;AACF,CAAC;AAED,eAAeT,OAAO,CAAC2C,eAAe,EAAEK,kBAAkB,CAAC,CAACpC,aAAa,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
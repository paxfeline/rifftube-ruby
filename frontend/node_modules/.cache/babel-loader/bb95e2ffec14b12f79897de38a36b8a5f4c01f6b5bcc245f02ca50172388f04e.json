{"ast":null,"code":"import { DELETE_RIFF, SAVE_NEW_RIFF, SAVE_EDIT_RIFF, CANCEL_EDIT, RECEIVE_RIFF_LIST, SAVE_NEW_RIFF_SUCCESS, UPDATE_RIFF_TIME_SUCCESS } from '../actions/index.js';\nlet initialState = [];\nconst riffsReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case DELETE_RIFF:\n      {\n        let ret = {\n          ...state\n        };\n        delete ret[action.id];\n        return ret;\n      }\n    case RECEIVE_RIFF_LIST:\n      return action.payload.reduce((acc, cur) => {\n        cur.payload = cur.isText ? cur.text : null;\n        cur.type = cur.isText ? 'text' : 'audio';\n        acc[cur.id] = cur;\n      }, {});\n    case UPDATE_RIFF_TIME_SUCCESS:\n      let riffs = [...state];\n      riffs.forEach((el, ind, arr) => {\n        if (el.id === action.id) arr[ind] = {\n          ...el,\n          id: action.id,\n          start: Number(action.start)\n        };\n        //el.id = action.payload.id;\n      });\n\n      return riffs;\n    case SAVE_NEW_RIFF:\n      // code block for variable grouping\n      {\n        const riff = {\n          ...action.payload,\n          saved: false,\n          tempId: new Date().getUTCMilliseconds()\n        };\n        delete riff.payload;\n\n        // create new riffs.all list, including new riff\n        let riffs = [...state, riff];\n        return riffs;\n      }\n    case SAVE_EDIT_RIFF:\n      {\n        const riff = {\n          ...action.payload,\n          saved: false\n        };\n        delete riff.payload;\n        let riffs = [...state];\n        riffs[riff.id] = riff;\n        return riffs;\n      }\n    case SAVE_NEW_RIFF_SUCCESS:\n      {\n        let riffs = [...state];\n        riffs.forEach((el, ind, arr) => {\n          if (el.tempId === action.payload.tempId) arr[ind] = {\n            ...el,\n            id: action.payload.id\n          };\n          //el.id = action.payload.id;\n        });\n\n        return riffs;\n      }\n    case SAVE_EDIT_RIFF_SUCCESS:\n      {}\n    default:\n      return state;\n  }\n};\nexport default riffsReducer;","map":{"version":3,"names":["DELETE_RIFF","SAVE_NEW_RIFF","SAVE_EDIT_RIFF","CANCEL_EDIT","RECEIVE_RIFF_LIST","SAVE_NEW_RIFF_SUCCESS","UPDATE_RIFF_TIME_SUCCESS","initialState","riffsReducer","state","action","type","ret","id","payload","reduce","acc","cur","isText","text","riffs","forEach","el","ind","arr","start","Number","riff","saved","tempId","Date","getUTCMilliseconds","SAVE_EDIT_RIFF_SUCCESS"],"sources":["/Users/davidnewberry/Documents/test_rails/frontend/src/reducers/riffs-reducer.js"],"sourcesContent":["import {\n  DELETE_RIFF,\n  SAVE_NEW_RIFF,\n  SAVE_EDIT_RIFF,\n  CANCEL_EDIT,\n  RECEIVE_RIFF_LIST,\n  SAVE_NEW_RIFF_SUCCESS,\n  UPDATE_RIFF_TIME_SUCCESS,\n} from '../actions/index.js';\n\nlet initialState = [];\n\nconst riffsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case DELETE_RIFF: {\n      let ret = { ...state };\n      delete ret[action.id]\n      return ret;\n    }\n    case RECEIVE_RIFF_LIST:\n      return action.payload.reduce(\n        (acc, cur) =>\n        {\n          cur.payload = cur.isText ? cur.text : null;\n          cur.type = cur.isText ? 'text' : 'audio';\n          acc[cur.id] = cur;\n        }, {}\n      )\n    case UPDATE_RIFF_TIME_SUCCESS:\n      let riffs = [...state];\n      riffs.forEach((el, ind, arr) => {\n        if (el.id === action.id)\n          arr[ind] = { ...el, id: action.id, start: Number(action.start) };\n        //el.id = action.payload.id;\n      });\n      return riffs;\n\n    case SAVE_NEW_RIFF: // code block for variable grouping\n    {\n      const riff =\n      {\n        ...action.payload,\n        saved: false,\n        tempId: new Date().getUTCMilliseconds()\n      };\n      delete riff.payload;\n\n      // create new riffs.all list, including new riff\n      let riffs = [...state, riff];\n\n      return riffs;\n    }\n\n    case SAVE_EDIT_RIFF:\n    {\n      const riff = { ...action.payload, saved: false };\n      delete riff.payload;\n\n      let riffs = [...state];\n      riffs[riff.id] = riff;\n\n      return riffs;\n    }\n\n    case SAVE_NEW_RIFF_SUCCESS:\n    {\n      let riffs = [...state];\n      riffs.forEach((el, ind, arr) => {\n        if (el.tempId === action.payload.tempId)\n          arr[ind] = { ...el, id: action.payload.id };\n        //el.id = action.payload.id;\n      });\n      return riffs;\n    }\n    case SAVE_EDIT_RIFF_SUCCESS:\n    {\n      \n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default riffsReducer;\n"],"mappings":"AAAA,SACEA,WAAW,EACXC,aAAa,EACbC,cAAc,EACdC,WAAW,EACXC,iBAAiB,EACjBC,qBAAqB,EACrBC,wBAAwB,QACnB,qBAAqB;AAE5B,IAAIC,YAAY,GAAG,EAAE;AAErB,MAAMC,YAAY,GAAG,YAAkC;EAAA,IAAjCC,KAAK,uEAAGF,YAAY;EAAA,IAAEG,MAAM;EAChD,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKX,WAAW;MAAE;QAChB,IAAIY,GAAG,GAAG;UAAE,GAAGH;QAAM,CAAC;QACtB,OAAOG,GAAG,CAACF,MAAM,CAACG,EAAE,CAAC;QACrB,OAAOD,GAAG;MACZ;IACA,KAAKR,iBAAiB;MACpB,OAAOM,MAAM,CAACI,OAAO,CAACC,MAAM,CAC1B,CAACC,GAAG,EAAEC,GAAG,KACT;QACEA,GAAG,CAACH,OAAO,GAAGG,GAAG,CAACC,MAAM,GAAGD,GAAG,CAACE,IAAI,GAAG,IAAI;QAC1CF,GAAG,CAACN,IAAI,GAAGM,GAAG,CAACC,MAAM,GAAG,MAAM,GAAG,OAAO;QACxCF,GAAG,CAACC,GAAG,CAACJ,EAAE,CAAC,GAAGI,GAAG;MACnB,CAAC,EAAE,CAAC,CAAC,CACN;IACH,KAAKX,wBAAwB;MAC3B,IAAIc,KAAK,GAAG,CAAC,GAAGX,KAAK,CAAC;MACtBW,KAAK,CAACC,OAAO,CAAC,CAACC,EAAE,EAAEC,GAAG,EAAEC,GAAG,KAAK;QAC9B,IAAIF,EAAE,CAACT,EAAE,KAAKH,MAAM,CAACG,EAAE,EACrBW,GAAG,CAACD,GAAG,CAAC,GAAG;UAAE,GAAGD,EAAE;UAAET,EAAE,EAAEH,MAAM,CAACG,EAAE;UAAEY,KAAK,EAAEC,MAAM,CAAChB,MAAM,CAACe,KAAK;QAAE,CAAC;QAClE;MACF,CAAC,CAAC;;MACF,OAAOL,KAAK;IAEd,KAAKnB,aAAa;MAAE;MACpB;QACE,MAAM0B,IAAI,GACV;UACE,GAAGjB,MAAM,CAACI,OAAO;UACjBc,KAAK,EAAE,KAAK;UACZC,MAAM,EAAE,IAAIC,IAAI,EAAE,CAACC,kBAAkB;QACvC,CAAC;QACD,OAAOJ,IAAI,CAACb,OAAO;;QAEnB;QACA,IAAIM,KAAK,GAAG,CAAC,GAAGX,KAAK,EAAEkB,IAAI,CAAC;QAE5B,OAAOP,KAAK;MACd;IAEA,KAAKlB,cAAc;MACnB;QACE,MAAMyB,IAAI,GAAG;UAAE,GAAGjB,MAAM,CAACI,OAAO;UAAEc,KAAK,EAAE;QAAM,CAAC;QAChD,OAAOD,IAAI,CAACb,OAAO;QAEnB,IAAIM,KAAK,GAAG,CAAC,GAAGX,KAAK,CAAC;QACtBW,KAAK,CAACO,IAAI,CAACd,EAAE,CAAC,GAAGc,IAAI;QAErB,OAAOP,KAAK;MACd;IAEA,KAAKf,qBAAqB;MAC1B;QACE,IAAIe,KAAK,GAAG,CAAC,GAAGX,KAAK,CAAC;QACtBW,KAAK,CAACC,OAAO,CAAC,CAACC,EAAE,EAAEC,GAAG,EAAEC,GAAG,KAAK;UAC9B,IAAIF,EAAE,CAACO,MAAM,KAAKnB,MAAM,CAACI,OAAO,CAACe,MAAM,EACrCL,GAAG,CAACD,GAAG,CAAC,GAAG;YAAE,GAAGD,EAAE;YAAET,EAAE,EAAEH,MAAM,CAACI,OAAO,CAACD;UAAG,CAAC;UAC7C;QACF,CAAC,CAAC;;QACF,OAAOO,KAAK;MACd;IACA,KAAKY,sBAAsB;MAC3B,CAEA;IAEA;MACE,OAAOvB,KAAK;EAAC;AAEnB,CAAC;AAED,eAAeD,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}
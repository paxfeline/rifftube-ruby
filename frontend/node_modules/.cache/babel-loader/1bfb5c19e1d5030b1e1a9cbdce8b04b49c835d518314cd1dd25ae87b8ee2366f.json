{"ast":null,"code":"import { DELETE_RIFF, SAVE_NEW_RIFF, SAVE_EDIT_RIFF, CANCEL_EDIT, RECEIVE_RIFF_LIST, SAVE_NEW_RIFF_SUCCESS, UPDATE_RIFF_TIME_SUCCESS } from '../actions/index.js';\nlet initialState = [];\nconst riffsReducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n  switch (action.type) {\n    case DELETE_RIFF:\n      {\n        let ret = {\n          ...state\n        };\n        ret.all = ret.all.filter(el => el.id !== action.id);\n\n        // silly change\n\n        /*let index = ret.all.findIndex(el => el.id === action.id);\n           ret.all.splice(index, 1);*/\n\n        return ret;\n      }\n    case RECEIVE_RIFF_LIST:\n      //debugger;\n      return {\n        ...state,\n        timestamp: Date.now(),\n        all: action.payload.map(el => ({\n          ...el,\n          time: el.start,\n          payload: el.isText ? el.text : null,\n          type: el.isText ? 'text' : 'audio'\n        }))\n      };\n    case UPDATE_RIFF_TIME_SUCCESS:\n      let riffs = [...state.all];\n      riffs.forEach((el, ind, arr) => {\n        if (el.id === action.id) arr[ind] = {\n          ...el,\n          id: action.id,\n          time: Number(action.time)\n        };\n        //el.id = action.payload.id;\n      });\n\n      let ret = {\n        ...state,\n        all: riffs\n      };\n      return ret;\n    case SAVE_NEW_RIFF:\n      // code block for variable grouping\n      {\n        const actionPayload = action.payload;\n        const riff = {\n          ...state.temp,\n          ...actionPayload,\n          saved: false,\n          tempId: new Date().getUTCMilliseconds()\n        };\n        delete riff.payload;\n\n        // create new riffs.all list, including new riff\n        let riffs = [...state.all, riff];\n        return {\n          all: riffs,\n          temp: null\n        };\n      }\n    case SAVE_EDIT_RIFF:\n      {\n        const actionPayload = action.payload;\n        const riff = {\n          ...state.temp,\n          ...actionPayload,\n          saved: false\n        };\n        delete riff.payload;\n        let riffs = [...state.all];\n        riffs[state.editIndex] = riff;\n        return {\n          all: riffs,\n          temp: null\n        };\n      }\n    case SAVE_NEW_RIFF_SUCCESS:\n      if (action.payload.type === 'add') {\n        let riffs = [...state.all];\n        riffs.forEach((el, ind, arr) => {\n          if (el.tempId === action.payload.tempId) arr[ind] = {\n            ...el,\n            id: action.payload.id\n          };\n          //el.id = action.payload.id;\n        });\n\n        let ret = {\n          ...state,\n          all: riffs\n        };\n        return ret;\n      } else {}\n    //return state;\n\n    /*\n    case LOAD_RIFF:\n      let ret = { ...state }; // will this work?\n      ret.all[action.payload].loading = true;\n      return ret;\n    case RIFF_LOADED: {\n      debugger;\n      const b = new Blob(new Array(action.payload), { type: 'audio/mp3' });\n      let riffs = [...state.all];\n      riffs.forEach(el => {\n        if (el.id === action.id) {\n          el.payload = b;\n          el.loading = false;\n        }\n      });\n      let ret = { ...state, all: riffs };\n       // if this is being edited currently, tempRiff needs to be updated as well\n      // editIndex != null simply means that something is being edited\n      if (state.editIndex !== null && state.temp.id === action.id)\n        ret.temp = { ...ret.temp, payload: b };\n       return ret;\n    }\n    */\n\n    default:\n      return state;\n  }\n};\nexport default riffsReducer;","map":{"version":3,"names":["DELETE_RIFF","SAVE_NEW_RIFF","SAVE_EDIT_RIFF","CANCEL_EDIT","RECEIVE_RIFF_LIST","SAVE_NEW_RIFF_SUCCESS","UPDATE_RIFF_TIME_SUCCESS","initialState","riffsReducer","state","action","type","ret","all","filter","el","id","timestamp","Date","now","payload","map","time","start","isText","text","riffs","forEach","ind","arr","Number","actionPayload","riff","temp","saved","tempId","getUTCMilliseconds","editIndex"],"sources":["/Users/davidnewberry/Documents/test_rails/frontend/src/reducers/riffs-reducer.js"],"sourcesContent":["import {\n  DELETE_RIFF,\n  SAVE_NEW_RIFF,\n  SAVE_EDIT_RIFF,\n  CANCEL_EDIT,\n  RECEIVE_RIFF_LIST,\n  SAVE_NEW_RIFF_SUCCESS,\n  UPDATE_RIFF_TIME_SUCCESS,\n} from '../actions/index.js';\n\nlet initialState = [];\n\nconst riffsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case DELETE_RIFF: {\n      let ret = { ...state };\n\n      ret.all = ret.all.filter((el) => el.id !== action.id);\n\n      // silly change\n\n      /*let index = ret.all.findIndex(el => el.id === action.id);\n\n\n\n      ret.all.splice(index, 1);*/\n\n      return ret;\n    }\n    case RECEIVE_RIFF_LIST:\n      //debugger;\n      return {\n        ...state,\n        timestamp: Date.now(),\n        all: action.payload.map((el) => ({\n          ...el,\n          time: el.start,\n          payload: el.isText ? el.text : null,\n          type: el.isText ? 'text' : 'audio',\n        })),\n      };\n\n    case UPDATE_RIFF_TIME_SUCCESS:\n      let riffs = [...state.all];\n      riffs.forEach((el, ind, arr) => {\n        if (el.id === action.id)\n          arr[ind] = { ...el, id: action.id, time: Number(action.time) };\n        //el.id = action.payload.id;\n      });\n      let ret = { ...state, all: riffs };\n      return ret;\n\n    case SAVE_NEW_RIFF: // code block for variable grouping\n    {\n      const actionPayload = action.payload;\n      const riff = { ...state.temp, ...actionPayload,\n        saved: false, tempId: new Date().getUTCMilliseconds() };\n      delete riff.payload;\n\n      // create new riffs.all list, including new riff\n      let riffs = [...state.all, riff];\n\n      return {\n        all: riffs,\n        temp: null,\n      };\n    }\n\n    case SAVE_EDIT_RIFF:\n    {\n      const actionPayload = action.payload;\n      const riff = { ...state.temp, ...actionPayload, saved: false };\n      delete riff.payload;\n\n      let riffs = [...state.all];\n      riffs[state.editIndex] = riff;\n\n      return {\n        all: riffs,\n        temp: null,\n      };\n    }\n\n    case SAVE_NEW_RIFF_SUCCESS:\n      if (action.payload.type === 'add') {\n        let riffs = [...state.all];\n        riffs.forEach((el, ind, arr) => {\n          if (el.tempId === action.payload.tempId)\n            arr[ind] = { ...el, id: action.payload.id };\n          //el.id = action.payload.id;\n        });\n        let ret = { ...state, all: riffs };\n        return ret;\n      }\n      else\n      {\n\n      }\n      //return state;\n\n    /*\n    case LOAD_RIFF:\n      let ret = { ...state }; // will this work?\n      ret.all[action.payload].loading = true;\n      return ret;\n    case RIFF_LOADED: {\n      debugger;\n      const b = new Blob(new Array(action.payload), { type: 'audio/mp3' });\n      let riffs = [...state.all];\n      riffs.forEach(el => {\n        if (el.id === action.id) {\n          el.payload = b;\n          el.loading = false;\n        }\n      });\n      let ret = { ...state, all: riffs };\n\n      // if this is being edited currently, tempRiff needs to be updated as well\n      // editIndex != null simply means that something is being edited\n      if (state.editIndex !== null && state.temp.id === action.id)\n        ret.temp = { ...ret.temp, payload: b };\n\n      return ret;\n    }\n    */\n\n    default:\n      return state;\n  }\n};\n\nexport default riffsReducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
<div style="margin-top: 1em;">
<audio controls
    src="<%= id.present? ? riff_path(id) : '' %>">
</audio>
</div>

<div>
<button
    class="rifftube-record-btn"
    onMouseDown="rifftube.record_start()"
    onMouseUp="rifftube.record_stop()">
    record
</button>
(press and hold)
</div>

<%= form_with model: riff, multipart: true do |form| %>

<% if video_id.present? %>
<input type="hidden" name="riff[video_id]" value="<%= video_id %>">
<% end %>

<%# form.hidden_field inserts autocomplete="off" which prevents bfcaching %>
<%= form.number_field :duration, { style: "display: none;" } %>

<div>
<%= form.label :text, "Riff Text" %><br>
<%= form.text_area :text %><br>
</div>

<div>
<%= form.label :start, "Start Time" %><br>
<%= form.number_field :start, step: 0.5 %><br>
</div>

<details>
    <summary>Advanced Options</summary>
    <input type="file" name="riff[blob]" accept="audio/mp4">
</details>

<div style="margin-top: 1em;">
<button
    onClick="rifftube.close_modal(); event.preventDefault();">
    Cancel
</button>

<button
    onClick="rifftube.save_riff(event); event.preventDefault();">
    Save
</button>
</div>

</div>

<% end %>

<script>

function duplicate_blob(blob)
{
    return blob.slice(0, blob.size, blob.type);
}

var rifftube = rifftube || {};

// rifftube-riff-edit-dialog class
// data-riff-id or data-new-riff attribute for edit / new
var dialSel = ".rifftube-riff-edit-dialog[data-<%= id.present? ? "riff-id='#{id}'".html_safe : "new-riff" %>]";
rifftube.curDial = document.querySelector(dialSel);
rifftube.curRecBtn = rifftube.curDial.querySelector(".rifftube-record-btn");
//console.log("btn", rifftube.curRecBtn);
//debugger;
rifftube.curPlayer = rifftube.curDial.querySelector("audio");
rifftube.curForm = rifftube.curDial.querySelector("form");
rifftube.curFile = rifftube.curDial.querySelector("input[type='file']")
rifftube.curDur = rifftube.curForm.querySelector("[name='riff[duration]']")

if (rifftube.curFile.files.length == 1)
{
    let audio_URL = URL.createObjectURL(duplicate_blob(rifftube.curFile.files[0]));
    rifftube.curPlayer.src = audio_URL;
    rifftube.temp_audio = duplicate_blob(rifftube.curFile.files[0])
    console.log("did it", rifftube.curFile.files[0]);
}

//debugger;
if (navigator.mediaDevices)
{
    navigator.mediaDevices
        .getUserMedia({ audio: true, video: false })
        .then((stream) =>
        {
            rifftube.stream = stream;
            
            rifftube.recorder = new MediaRecorder(stream);
        
            rifftube.chunks = [];
            rifftube.recorder.ondataavailable = function(e)
            {
                rifftube.chunks.push(e.data);
            }
        
            rifftube.recorder.onstop = function(e)
            {
                console.log("recorder stopped, saving ", rifftube.recorder);

                rifftube.temp_audio = new Blob(rifftube.chunks, { 'type' : rifftube.recorder.mimeType });
                
                rifftube.chunks = [];
                
                rifftube.audio_URL = URL.createObjectURL(duplicate_blob(rifftube.temp_audio));

                rifftube.curPlayer.src = rifftube.audio_URL;

                // Wrap audio blob as File; use DataTransfer to create a files object; assign to file input.
                // This keeps the audio in place in case of navigation away and back.
                // Other code reads it from the input and restores the audio player's src attr.
                let file = new File([rifftube.temp_audio], `recorded audio ${new Date().toLocaleTimeString()}`, {type: rifftube.recorder.mimeType, lastModified: Date.now()});
                let container = new DataTransfer();
                container.items.add(file);
                rifftube.curFile.files = container.files;
            }

            console.log("checking for immediate record")

            //debugger;

            // immediate start
            if (rifftube.curDial.hasAttribute("data-immediate-record"))
                rifftube.record_start();
        })
        .catch( (err) => {
            //enable the record button if getUSerMedia() fails
            console.log("oops, can't get stream", err);
        });
}

rifftube.record_start = function()
{
    if (rifftube.recording) return;

    //debugger;

    console.log("start rec", rifftube)

    rifftube.recording = true;

    rifftube.curRecBtn.innerHTML = "recording..."

    rifftube.record_start_time = Date.now();

    rifftube.recorder.start();
}


rifftube.record_stop = function()
{
    if (!rifftube.recording) return;

    rifftube.recorder.stop();

    console.log("end rec", rifftube)

    rifftube.recording = false;

    rifftube.curRecBtn.innerHTML = "record"

    rifftube.riff_duration = (Date.now() - rifftube.record_start_time) / 1000;

    //debugger;
    rifftube.curDur.value = rifftube.riff_duration;
}

rifftube.close_modal = function()
{
    let cust_event = new CustomEvent("rifftube:riff:save:close");
    document.dispatchEvent(cust_event);
    console.log(cust_event);

    rifftube.curDial.close();
    rifftube.curDial.remove();
}

rifftube.save_riff = function(event)
{
    //debugger;

    event.preventDefault();

    /*  old detail object:
    detail:
    {
        id: <%= id.present? ? id : "null"  %>,
        audio: rifftube.temp_audio,
    }
    */

    let detail = new FormData(rifftube.curForm);

    let cust_event = new CustomEvent("rifftube:riff:save", { detail });
    document.dispatchEvent(cust_event);
    console.log(cust_event);

    //rifftube.close_modal();
}

console.log("injected script running");

//debugger;

rifftube.rec_keydown = function(e)
{
    if ( event.getModifierState("Control") +
            event.getModifierState("Alt") +
            event.getModifierState("Meta") > 1 )
        return;

    if (e.key == 'r')
    {
        rifftube.record_start();
        e.stopPropagation();
    }
}

rifftube.rec_keyup = function(e)
{
    if ( event.getModifierState("Control") +
            event.getModifierState("Alt") +
            event.getModifierState("Meta") > 1 )
        return;

    if (e.key == 'r')
    {
        rifftube.record_stop();
        e.stopPropagation();
    }
}

rifftube.curDial.addEventListener('keydown', rifftube.rec_keydown, false);
rifftube.curDial.addEventListener('keyup', rifftube.rec_keyup, false);

rifftube.curDial.addEventListener("cancel", () => { rifftube.close_modal(); });

rifftube.curDial.showModal();

</script>